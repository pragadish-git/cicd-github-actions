# This is a workflow to manage the build and deployment of Boomi packages across different environments

name: Boomi CICD Workflow

# Controls when the workflow will run
on:
  # Triggers the workflow on push for the "master", "develop-*", and "release-*" branches or pull request events for the "develop-*" branch
  push:
    branches:
      - "master"
      - "develop-**"
    paths-ignore:
      - '**.md'
      - 'extensions.json'
      - 'images/**'
  pull_request:
    branches:
      - "master"
    paths-ignore:
      - '**.md'
      - 'extensions.json'
      - 'images/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      environment:
        type: environment

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  Build:
    if: (startsWith(github.event.ref,'refs/heads/master') || startsWith(github.event.ref,'refs/heads/develop-')) && github.event_name == 'push'
    # if: startsWith(github.event.ref,'refs/heads/develop-') && github.event_name == 'push'
    # if: github.event_name == 'pull_request'

    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Setting environment to Common to get boomi details for packaging
    environment: Development
    #  url: "http://dev.myapp.com"

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Build packages for the deliverables
      - name: Set environment
        uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(secrets) }}

      - name: Checkout
        uses: actions/checkout@v3

      - name: Check packages file existence
        id: check_packages_file
        uses: andstor/file-existence-action@v1
        with:
          files: "packages.json"

      # - name: Check file existence
      #   id: check_extension_file
      #   uses: andstor/file-existence-action@v1
      #   with:
      #     files: "extensions.json"

      # - name: Does extension file exists
      #   run: |
      #     echo '${{ steps.check_extension_file.outputs.files_exists }}'

      - name: Read file contents
        if: steps.check_packages_file.outputs.files_exists == 'true'
        id: read_file
        uses: andstor/file-reader-action@v1
        with:
          path: "packages.json"

      - name: Update file contents
        if: steps.check_packages_file.outputs.files_exists == 'true'
        id: update_contents
        run: |
          echo ::set-output name=FJSON::$(echo '{"components": '$(echo '${{ steps.read_file.outputs.contents }}')'}')

      - name: Display contents
        if: steps.check_packages_file.outputs.files_exists == 'true'
        run: |
          echo ${{ steps.update_contents.outputs.FJSON }}
          
      - name: Docker sonar image
        if: steps.check_packages_file.outputs.files_exists == 'true'
        run: |
          docker --version
          mkdir -p /opt/sonarqube
          volume="sonar_vol"
          docker volume create --opt type=none --opt device=/opt/sonarqube --opt o=bind ${volume}
          echo "1 - Iamhere"
          docker ps
          docker run --name boomisonar -p 9000:9000 --volume ${volume}:/opt/sonarqube -d -t boomicicd/sonar:latest
          docker ps
          echo "2 - Iamhere"
          pwd
          # curl http://localhost:9000
          # pwd
          cd /
          ls -lrt
          
  DeployToDev:
    name: Deploy to Dev

    if: (startsWith(github.event.ref,'refs/heads/master') || startsWith(github.event.ref,'refs/heads/develop-')) && github.event_name == 'push' && github.event.inputs.environment =='Development'
    # if: startsWith(github.event.ref,'refs/heads/develop-') && github.event.inputs.environment =='Development'
    # needs: [Build]
    runs-on: ubuntu-latest

    environment: Development
    #  url: "http://dev.myapp.com"

    steps:
      # Deploy packages to environment
      - name: Set environment
        uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(secrets) }}

      - name: Checkout
        uses: actions/checkout@v3

      - name: Check packages file existence
        id: check_packages_file
        uses: andstor/file-existence-action@v1
        with:
          files: "packages.json"

      - name: Read file contents
        if: steps.check_packages_file.outputs.files_exists == 'true'
        id: read_file
        uses: andstor/file-reader-action@v1
        with:
          path: "packages.json"

      - name: Update file contents
        if: steps.check_packages_file.outputs.files_exists == 'true'
        id: update_contents
        run: |
          echo ::set-output name=FJSON::$(echo '{"packages": '$(echo '${{ steps.read_file.outputs.contents }}')'}' | jq '. + {"environmentId": "${{ secrets.BOOMI_ENVIRONMENT_ID }}"}')

      - name: Display contents
        if: steps.check_packages_file.outputs.files_exists == 'true'
        run: |
          echo ${{ steps.update_contents.outputs.FJSON }}

  DeployToSIT:
    name: Deploy to SIT

    if: (startsWith(github.event.ref,'refs/heads/master') || startsWith(github.event.ref,'refs/heads/develop-')) && github.event_name == 'push' && github.event.inputs.environment =='SIT'
    # if: startsWith(github.event.ref,'refs/heads/develop-') && github.event.inputs.environment =='SIT'
    # needs: [DeployToDev]
    runs-on: ubuntu-latest

    environment: SIT
    #  url: "http://sit.myapp.com"

    steps:
      # Deploy packages to environment
      - name: Set environment
        uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(secrets) }}

      - name: Checkout
        uses: actions/checkout@v3

      - name: Check packages file existence
        id: check_packages_file
        uses: andstor/file-existence-action@v1
        with:
          files: "packages.json"

      - name: Read file contents
        if: steps.check_packages_file.outputs.files_exists == 'true'
        id: read_file
        uses: andstor/file-reader-action@v1
        with:
          path: "packages.json"

      - name: Update file contents
        if: steps.check_packages_file.outputs.files_exists == 'true'
        id: update_contents
        run: |
          echo ::set-output name=FJSON::$(echo '{"packages": '$(echo '${{ steps.read_file.outputs.contents }}')'}' | jq '. + {"environmentId": "${{ secrets.BOOMI_ENVIRONMENT_ID }}"}')

      - name: Display contents
        if: steps.check_packages_file.outputs.files_exists == 'true'
        run: |
          echo ${{ steps.update_contents.outputs.FJSON }}

  DeployToUAT:
    name: Deploy to UAT

    if: (startsWith(github.event.ref,'refs/heads/master') || startsWith(github.event.ref,'refs/heads/develop-')) && github.event_name == 'push' && github.event.inputs.environment =='UAT'
    # if: startsWith(github.event.ref,'refs/heads/develop-') && github.event.inputs.environment =='UAT'
    # needs: [DeployToSIT]
    runs-on: ubuntu-latest

    environment: UAT
    #  url: "http://sit.myapp.com"

    steps:
      # Deploy packages to environment
      - name: Set environment
        uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(secrets) }}

      - name: Checkout
        uses: actions/checkout@v3

      - name: Check packages file existence
        id: check_packages_file
        uses: andstor/file-existence-action@v1
        with:
          files: "packages.json"

      - name: Read file contents
        if: steps.check_packages_file.outputs.files_exists == 'true'
        id: read_file
        uses: andstor/file-reader-action@v1
        with:
          path: "packages.json"

      - name: Update file contents
        if: steps.check_packages_file.outputs.files_exists == 'true'
        id: update_contents
        run: |
          echo ::set-output name=FJSON::$(echo '{"packages": '$(echo '${{ steps.read_file.outputs.contents }}')'}' | jq '. + {"environmentId": "${{ secrets.BOOMI_ENVIRONMENT_ID }}"}')

      - name: Display contents
        if: steps.check_packages_file.outputs.files_exists == 'true'
        run: |
          echo ${{ steps.update_contents.outputs.FJSON }}

  DeployToProd:
  #   name: Deploy to Prod
  #   if: github.event.ref == 'refs/heads/master' && github.event_name == 'push'
  
    name: Deploy to Prod

    # if: startsWith(github.event.ref,'refs/heads/master') && ( github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'merge' )
    if: startsWith(github.event.ref,'refs/heads/master') && github.event_name == 'pull_request'
    # needs: [DeployToUAT]
    runs-on: ubuntu-latest

    environment: Prod
    #  url: "http://sit.myapp.com"

    steps:
      # Deploy packages to environment
      - name: Set environment
        uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(secrets) }}

      - name: Checkout
        uses: actions/checkout@v3

      - name: Check packages file existence
        id: check_packages_file
        uses: andstor/file-existence-action@v1
        with:
          files: "packages.json"

      - name: Read file contents
        if: steps.check_packages_file.outputs.files_exists == 'true'
        id: read_file
        uses: andstor/file-reader-action@v1
        with:
          path: "packages.json"

      - name: Update file contents
        if: steps.check_packages_file.outputs.files_exists == 'true'
        id: update_contents
        run: |
          echo ::set-output name=FJSON::$(echo '{"packages": '$(echo '${{ steps.read_file.outputs.contents }}')'}' | jq '. + {"environmentId": "${{ secrets.BOOMI_ENVIRONMENT_ID }}"}')
          echo '${{ github.event_name }}'

      - name: Display contents
        if: steps.check_packages_file.outputs.files_exists == 'true'
        run: |
          echo ${{ steps.update_contents.outputs.FJSON }}
